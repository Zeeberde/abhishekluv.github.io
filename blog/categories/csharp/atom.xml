<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CSharp | Abhishek Luv]]></title>
  <link href="http://www.abhishekluv.in/blog/categories/csharp/atom.xml" rel="self"/>
  <link href="http://www.abhishekluv.in/"/>
  <updated>2014-09-16T12:50:24+05:30</updated>
  <id>http://www.abhishekluv.in/</id>
  <author>
    <name><![CDATA[Abhishek Luv]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generic Repository Interface in CSharp]]></title>
    <link href="http://www.abhishekluv.in/blog/2014/01/28/generic-repository-interface-in-csharp/"/>
    <updated>2014-01-28T14:05:21+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2014/01/28/generic-repository-interface-in-csharp</id>
    <content type="html"><![CDATA[<p>Repository pattern are intended to create an abstraction layer between Data Access layer and business layer so it can help to insulate application from changes in the data store and can facilitate automated unit testing or test-driven development.</p>

<!-- more -->


<p><div><script src='https://gist.github.com/8664063.js'></script>
<noscript><pre><code>public interface IRepository&lt;T&gt; : IDisposable where T : class
    {
        IQueryable&lt;T&gt; All();

        bool Any(Expression&lt;Func&lt;T, bool&gt;&gt; predicate);

        int Count { get; }

        T Create(T t);

        int Delete(T t);
        int Delete(Expression&lt;Func&lt;T, bool&gt;&gt; predicate);

        T Find(params object[] keys);
        T Find(Expression&lt;Func&lt;T, bool&gt;&gt; predicate);

        IQueryable&lt;T&gt; FindAll(Expression&lt;Func&lt;T, bool&gt;&gt; predicate);
        IQueryable&lt;T&gt; FindAll(Expression&lt;Func&lt;T, bool&gt;&gt; predicate, int index, int size);

        int Update(T t);       
    }</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
