<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Abhishek Luv]]></title>
  <link href="http://www.abhishekluv.in/atom.xml" rel="self"/>
  <link href="http://www.abhishekluv.in/"/>
  <updated>2014-06-09T12:49:10+05:30</updated>
  <id>http://www.abhishekluv.in/</id>
  <author>
    <name><![CDATA[Abhishek Luv]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Python Programming Language]]></title>
    <link href="http://www.abhishekluv.in/blog/2014/06/04/learning-python-programming-language/"/>
    <updated>2014-06-04T12:25:59+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2014/06/04/learning-python-programming-language</id>
    <content type="html"><![CDATA[<p>Hello folks,</p>

<p>This week I have started learning the Python Programming Language through an online course offered by the University of Michigan via Coursera.org.</p>

<p>The course is intended for beginners and people who are interested in learning the Python Programming Language.</p>

<!-- more -->


<p>Here are some details about the course :</p>

<h3>About the Course</h3>

<p>This course is specifically designed to be a first programming course using the popular Python programming language. The pace of the course is designed to lead to mastery of each of the topics in the class. We will use simple data analysis as the programming exercises through the course. Understanding how to process data is valuable for everyone regardless of your career. This course might kindle an interest in more advanced programming courses or courses in web design and development or just provide skills when you are faced with a bunch of data that you need to analyze. You can do the programming assignments for the class using a web browser or using your personal computer. All required software for the course is free.</p>

<h3>Course Syllabus</h3>

<ul>
<li>Week One: Introduction - Why we program?</li>
<li>Week Two: Variables and Expressions</li>
<li>Week Three: Conditional code</li>
<li>Week Four: Functions</li>
<li>Week Five: Loops and Iteration</li>
<li>Week Six: Strings</li>
<li>Week Seven: Files</li>
<li>Week Eight: Lists</li>
<li>Week Nine: Dictionaries</li>
<li>Week Ten: Tuples</li>
<li>Optional Topic: Regular Expressions</li>
</ul>


<h3>Course Format</h3>

<p>Each week there will be about an hour of lecture material. The ten weeks of the course match the first ten chapters of the book - we cover one chapter per week.   Each week there will be some combination of a quiz, programming assignment, and/or an optional extra credit assignment.</p>

<p>Want to learn the Python Programming Language..<a href="https://www.coursera.org/course/pythonlearn">Join Here</a></p>

<p>Happy Learning..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Orchard CMS Project India Community Website Launched]]></title>
    <link href="http://www.abhishekluv.in/blog/2014/05/27/orchard-cms-project-india-community-website-launched/"/>
    <updated>2014-05-27T12:49:38+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2014/05/27/orchard-cms-project-india-community-website-launched</id>
    <content type="html"><![CDATA[<p>Hello Orcharders,</p>

<p>I&#8217;m glad to launch a community website for Orchard CMS in India.</p>

<!-- more -->


<p><a href="http://www.orchardproject.net.in/">Orchard CMS India Community Website</a></p>

<p>Best
Abhishek Luv</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Orchard CMS Theme Development for Beginners - Udemy Course]]></title>
    <link href="http://www.abhishekluv.in/blog/2014/04/26/orchard-cms-theme-development-for-beginners-udemy-course/"/>
    <updated>2014-04-26T10:52:41+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2014/04/26/orchard-cms-theme-development-for-beginners-udemy-course</id>
    <content type="html"><![CDATA[<p>After the success of my first online course <a href="https://www.udemy.com/orchard-cms-for-absolute-beginners" title="https://www.udemy.com/orchard-cms-for-absolute-beginners">&#8220;Orchard CMS for Absolute Beginners&#8221;</a> currently having 1300+ students, I&#8217;m back with my latest online course on Orchard CMS for Theme Development &#8220;Orchard CMS Theme Developement for Beginners&#8221;.</p>




<!-- more -->




<p>This course will be a little more advanced than my previous course on Orchard CMS. So, <a href="https://www.udemy.com/orchard-cms-for-absolute-beginners" title="https://www.udemy.com/orchard-cms-for-absolute-beginners">basic knowledge of Orchard CMS</a> is required.</p>




<h2>Course Requirements</h2>




<ol>
<li>Basic Knowledge of Orchard CMS</li>
<li>Microsoft Visual Studio 2012 or Higher</li>
<li>Msysgit is required for cloning the Orchard CMS Source Code Project</li>
<li>Basic Knowledge of HTML &amp; Twitter Bootstrap CSS Classes</li>
</ol>




<h2>In this course, You will learn the following things</h2>




<ol>
<li>Get Started with Orchard CMS Theme Development</li>
<li>How to use Orchard CMS Command-Line Scaffolding</li>
<li>How to create themes in Orchard CMS</li>
<li>What are Shapes and How to override Shapes in Orchard</li>
<li>What are Shape Templates</li>
<li>What are Part Templates (Overriding Content Parts)</li>
<li>What are EditorTemplates (Overriding EditorTemplate for Content Parts)</li>
<li>How to override Widgets</li>
<li>Placement.info : Placing shapes in a specific zone with a weight</li>
<li>Placement.info : Matching(DisplayType, ContentType, Path)</li>
</ol>




<h2>Target Audience</h2>




<ol>
<li>Web Developers having interest in Orchard CMS Theme Development</li>
<li>Web Designers</li>
<li>Orchard Newbies</li>
</ol>




<p><a href="https://www.udemy.com/orchard-cms-theme-development-for-beginners" target="_blank" class="btn btn-primary btn-lg">Join This Course</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Command-Line &amp; GitHub Basics]]></title>
    <link href="http://www.abhishekluv.in/blog/2014/04/15/git-command-line-and-github-basics/"/>
    <updated>2014-04-15T10:42:29+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2014/04/15/git-command-line-and-github-basics</id>
    <content type="html"><![CDATA[<h3>What is a repository</h3>

<p>A repository is simply a database containing all the information needed to retain and manage the revisions and history of a project. Within a repository, Git maintains two primary data structures, the object store and the index.</p>

<p>The object store is designed to be efficiently copied during a clone operation as part of the mechanism that supports a fully DVCS.</p>

<p>Index is transitory information , is private to a repository and can be created or modified on demand as needed.</p>

<!-- more -->


<h3>Git Object Store</h3>

<p>It contains your original data files and all the log messages, author information, dates, and other information required to rebuild any revision or branch of the project.</p>

<p>There are four types of Object stores</p>

<ul>
<li><p>Blobs: A blob holds a file&#8217;s data but does not contain any metadata about the file or even its name.</p></li>
<li><p>Trees: Its records blob identifiers, path names and a bit of metadata for all the files in one directory. It can also recursively reference other subtrees.</p></li>
<li><p>Commits: A commits object holds metadata for each change introduced into the repository, including the author, committer, commit data, and log message.</p></li>
<li><p>Tags: A tag object assigns an arbitrary human readable name to a specific object usually a commit.</p></li>
</ul>


<h3>Index</h3>

<p>The index is a temporary and dynamic binary file that describes the directory structure of the entire repository.</p>

<p>Index captures a version of the project&#8217;s overall structure at some moment in time. As the developer, we execute Git commands to stage changes in the index. Changes usually add, delete or edit some files or set of files. The index records and retains those changes, keeping them safe until your are ready to commit them. You can also remove or replace changes in the index.</p>

<h3>Content-Addressable Names</h3>

<p>The Git object store is organized and implemented as a content-addressable storage system. Each object in the object store has a unique name produced by applying SHA1 to the contents of the object, yielding an SHA1 hash value. Any tiny change to a file causes the SHA1 hash to change, causing the new version of the file to be indexed separately.</p>

<p>SHA1 values are 160-bit value that are usually represented as a 40 digit hexadecimal number.</p>

<p>for example</p>

<pre><code>937082042f48a5cbc7777634509310fff059bc19
</code></pre>

<h2>File Management and The Index</h2>

<p>Remote Repository(master) &lt;-> Index(Staging happens here) &lt;-> Local Repository (local)</p>

<h3>Index</h3>

<p>Git&#8217;s Index doesn&#8217;t contain any file content: it simply tracks what you want to commit when you run git commit. Git checks the index rather than your working directory to discover what to commit.</p>

<p>You can query the state of the index at any time with the command <code>git status</code></p>

<h3>File Classification in Git</h3>

<ul>
<li>Tracked : Any file that&#8217;s already there in the repository or any file that is staged</li>
<li>Ignored : file to be ignored by git object store and git index</li>
<li>Untracked : An untracked file is any file not found in either of the previous two categories</li>
</ul>


<h1>Git and GitHub Basics</h1>

<hr />

<h2>How to generate SSH Key for GitHub</h2>

<p><code>$ cd ~/.ssh</code></p>

<p><code>$ ssh-keygen -t rsa -C "your_email@example.com"</code></p>

<p>to copy the RSA key to the clipboard</p>

<p><code>$ clip &lt; ~/.ssh/id_rsa.pub</code></p>

<h2>Getting Started</h2>

<h3>Git Command Line Commands</h3>

<p>add, bisect,branch, checkout,clone,commit,diff,fetch,grep,init,log,merge,mv,pull,push,rebase,reset,rm,show,status,
tag</p>

<h3>Git Version Check</h3>

<p><code>git --version</code></p>

<h3>Git Commit</h3>

<p><code>git commit -m "commit message"</code></p>

<p><code>git commit --message="commit message"</code></p>

<h3>Creating an initial repository</h3>

<p><code>git init</code></p>

<h3>Adding file to your repository</h3>

<p><code>git add index.html</code></p>

<h3>Git status</h3>

<p><code>git status</code></p>

<h3>Configuring the commit author</h3>

<p><code>git config user.name "abhishekluv"</code></p>

<p><code>git config user.email "abhishek.luv@outlook.com</code></p>

<h3>Viewing your commits</h3>

<p><code>git log</code></p>

<h3>Show your commit</h3>

<p><code>git show commitSHAnumber</code></p>

<h3>Show branch</h3>

<p><code>git show-branch --more=10</code></p>

<h3>Viewing commit differences</h3>

<p><code>git diff commitSHA#1 \ commitSHA2</code></p>

<h3>Removing a file in your repository</h3>

<p><code>git rm index.html</code></p>

<h3>Renaming a file in your repository</h3>

<p><code>git mv index.html index2.html</code></p>

<h3>Making a copy of your repository</h3>

<p><code>git clone firstreponame secondreponame</code></p>

<h3>Global commit author details</h3>

<p><code>git config --global user.name "abhishekluv"</code></p>

<p><code>git config --global user.email "abhishek.luv@outlook.com"</code></p>

<h3>Using git add</h3>

<p>Example</p>

<p><code>git add .gitignore</code></p>

<p><code>git add --all</code></p>

<p><code>git status</code></p>

<h3>using git commt -all</h3>

<p><code>git commit -a</code></p>

<p><code>git commit --all</code></p>

<p>causes it to automatically stage all unstaged, tracked file changes - including removal of tracked files from the working copy before it performs the commit.</p>

<h3>using git rm</h3>

<p><code>git rm index.html</code> : will remove the file completely from the working directory as well as the remote repo</p>

<p><code>git rm --cached index.html</code> : will remove the file from the index and leave it in the working directory</p>

<h3>using git mv</h3>

<p><code>mv stuff newstuff</code></p>

<p><code>git rm stuff</code></p>

<p><code>git add newstuff</code></p>

<p>or</p>

<p><code>git mv stuff newstuff</code></p>

<h3>.gitignore file</h3>

<p>add any file name in the .gitignore file which you want to ignore</p>

<h2>Commits</h2>

<p>In Git, a commit is used to record changes to a repository</p>

<p><code>git commit -m "message"</code></p>

<p><code>git commit --all -m "message"</code></p>

<h2>Branches</h2>

<p>A branch is the fundamental means of launching a separate line of development within a software project.</p>

<p>Git allows many branches and thus many different lines of development within a repository.</p>

<p>Creating a branch</p>

<p><code>git branch branchname</code></p>

<h3>list branches</h3>

<p><code>git branch</code></p>

<h3>list of branches with details</h3>

<p><code>git show-branch</code></p>

<h3>changing/checking out branches</h3>

<p><code>git checkout branchname</code></p>

<h3>creating and checking out a new branch</h3>

<p><code>git checkout -b branchname</code></p>

<h3>deleting a branch</h3>

<p><code>git branch -d branchname</code></p>

<h2>Merges</h2>

<h3>what is git merge</h3>

<p>In Git, a merge must occur within a single repository i.e. all the branches to be merged must be present in the same repository</p>

<p><code>git checkout branch</code></p>

<p><code>git merge other_branch</code></p>

<p><code>git commit -a -m "commit message"</code></p>

<h1>Steps for Git and GitHub</h1>

<hr />

<pre><code>1. Register at www.github.com
2. Create a new public repository at www.github.com
3. Download and Install msysgit from [here](https://code.google.com/p/msysgit/downloads/list "Download msysgit")
4. Create a folder for your new local repository
5. Open Command-Prompt or Powershell 
6. Run command ` git --version `
7. Run command to initialize a new local git repository ` git init `
8. Now go back to www.github.com and copy the remote repository HTTPS link onto your clipboard
9. Run command to add the remote repository as an origin ` git remote add origin remoterepoURL ` 
10. Run command to cross check the origin ` git remote -v `
11. Create a new file readme.txt
12. Run command to check the status of the index ` git status ` 
&gt; tracked 
&gt; untracked
&gt; ignored

13. Run command to add new file for staging ` git add readme.txt ` and check status ` git status `
14. Run command to unstage the file ` git rm --cached readme.txt ` 
15. Run command to commit the changes ` git commit -m "commit message" `
16. Run command to push the changes to remote repository ` git push origin master `
17. Create a new file gitignore.txt file in your local repository
18. Run command to rename gitignore.txt to .gitignore ` ren gitignore.txt .gitignore `
19. Run command to add all the file for staging ` git add --all `
20. Run command to reset on step back ` git reset HEAD `
21. Run command to create and checkout a branch ` git checkout -b develop `
22. Run command to push changes to new branch ` git push origin develop `
23. Run command to switch back to master branch ` git checkout master `
24. Run command to merge the develop into the master branch ` git merge develop `
25. Run command to publish local commits after merging ` git push origin master `
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating custom HTTP Module in ASP.NET]]></title>
    <link href="http://www.abhishekluv.in/blog/2014/03/12/creating-custom-http-module-in-asp-dot-net/"/>
    <updated>2014-03-12T20:22:12+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2014/03/12/creating-custom-http-module-in-asp-dot-net</id>
    <content type="html"><![CDATA[<p>The HTTP module&#8217;s code is executed every time a page is requested from the server or a response is sent back to a requestor. HTTP Modules are like the old Internet Server API(ISAPI Filters). All ASP.NET module are managed i.e. they execute within the CLR. ASP.NET itself uses HTTP Modules for things such as session state and caching.</p>

<!-- more -->


<h2>Creating Custom HTTP Module</h2>

<p>HTTP Modules can be created by implementing the IHttpModule interface. Next the IHttpModule.Init method has to be overriden to subscribe the application life cycle events like Application_BeginRequest, AuthenticationRequest, ProcessRequest, Application_EndRequest to the Init method. You need to register your custom HTTP Module by using the Web.config file. Every event in your HTTP Module is fired for each request.</p>

<div><script src='https://gist.github.com/9508505.js'></script>
<noscript><pre><code>using System;
using System.Web;
using System.Diagnostics;

public class LogModule : IHttpModule {

    public LogModule(){
        //constructor
    }

    public string ModuleName {
        get { return &quot;LogModule&quot;; }
    }

    public void Dispose(){

    }

    public void Init(HttpApplication context){
        // registering the events inside the Init method
        context.BeginRequest += 
            (new EventHandler(this.Application_BeginRequest));
        context.EndRequest +=
            (new EventHandler(this.Application_EndRequest));
    }

    public void Application_BeginRequest(Object source, EventArgs e){
        // logging code
        // Begin request logging
    }

    public void Application_EndRequest(Object source, EventArgs e){
        // logging code
        // End request logging
    }
}</code></pre></noscript></div>


<h2>Registering custom HTTP Module using web.config file(IIS7)</h2>

<div><script src='https://gist.github.com/9508720.js'></script>
<noscript><pre><code>&lt;configuration&gt;
    &lt;system.WebServer&gt;
        &lt;modules&gt;
            &lt;add name=&quot;LogModule&quot; type=&quot;LogModule&quot;/&gt;
        &lt;/modules&gt;
    &lt;/system.WebServer&gt;
&lt;/configuration&gt;</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Custom HTTP Handler in ASP.NET]]></title>
    <link href="http://www.abhishekluv.in/blog/2014/03/10/creating-custom-http-handler-in-asp-dot-net/"/>
    <updated>2014-03-10T22:19:07+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2014/03/10/creating-custom-http-handler-in-asp-dot-net</id>
    <content type="html"><![CDATA[<p>HTTP Handler is a key to unlocking how HTTP requests are linked to your ASP.NET Pages.</p>

<p>An HTTP Handler is an endpoint on the server that responds to requests for different resources. For Example, ASP.NET Page Handler is called when an ASPX page is requested from the sever. Similarly you can write your own custom handlers to be called when a resource with a specific file extension is requested of the server.</p>

<!-- more -->


<h2>Creating a Custom HTTP Handler</h2>

<p>An HTTP Handler is code that executes when an HTTP request for a specific resource is made to the server.
You can create custom handlers, register them with IIS.</p>

<p>You can create a custom, Synchronous HTTP Handler by implementing the IHttpHandler interface. This interface
requires you to implement the IsResusable property to indicate whether your handler can be resued to increase performance across requests.</p>

<p>The IHttpHandler interface also requires you to implement the ProcessRequest method. This method is called by ASP.NET when your handler executes. HTTP Handler exists inside ASP.NET. Therefore, it has access to the application context including the session state , application state and identity of the user making the request.</p>

<div><script src='https://gist.github.com/9468699.js'></script>
<noscript><pre><code>public class MyImageHandler : IHttpHandler
{
  public book IsReusable 
  {
     get { return false; }
  }

  public void ProcessRequest(HttpContext context)
  {
    // here you will set the MIME type for response 
    context.Response.ContentType = &quot;image/jpeg&quot;;

    HttpRequest Request = context.Request;
    HttpResponse Response = context.Response;

    if(Request.RawUrl.ToLower().Contains(&quot;abhishekluv.jpg&quot;))
    {
        Response.TransmitFile(Request.PhysicalApplicationPath + &quot;/images/abhishekluv.jpg&quot;);
    }
    else
    {
        Response.Write(&quot;File not found&quot;);
    }
  }
}</code></pre></noscript></div>


<h2>Registering custom HTTP Handler using web.config file</h2>

<div><script src='https://gist.github.com/9468923.js'></script>
<noscript><pre><code>&lt;configuration&gt;
    &lt;system.WebServer&gt;
        &lt;handlers&gt;
        &lt;add verb=&quot;*&quot; path=&quot;.jpg&quot; type=&quot;MyImageHandler&quot; name=&quot;MyImageHandler&quot;/&gt;
        &lt;/handlers&gt;
    &lt;/system.WebServer&gt;
&lt;/configuration&gt;</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generic Repository Interface in CSharp]]></title>
    <link href="http://www.abhishekluv.in/blog/2014/01/28/generic-repository-interface-in-csharp/"/>
    <updated>2014-01-28T14:05:21+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2014/01/28/generic-repository-interface-in-csharp</id>
    <content type="html"><![CDATA[<p>Repository pattern are intended to create an abstraction layer between Data Access layer and business layer so it can help to insulate application from changes in the data store and can facilitate automated unit testing or test-driven development.</p>

<!-- more -->




<div><script src='https://gist.github.com/8664063.js'></script>
<noscript><pre><code>public interface IRepository&lt;T&gt; : IDisposable where T : class
    {
        IQueryable&lt;T&gt; All();

        bool Any(Expression&lt;Func&lt;T, bool&gt;&gt; predicate);

        int Count { get; }

        T Create(T t);

        int Delete(T t);
        int Delete(Expression&lt;Func&lt;T, bool&gt;&gt; predicate);

        T Find(params object[] keys);
        T Find(Expression&lt;Func&lt;T, bool&gt;&gt; predicate);

        IQueryable&lt;T&gt; FindAll(Expression&lt;Func&lt;T, bool&gt;&gt; predicate);
        IQueryable&lt;T&gt; FindAll(Expression&lt;Func&lt;T, bool&gt;&gt; predicate, int index, int size);

        int Update(T t);       
    }</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mumbai Orchard CMS User Group]]></title>
    <link href="http://www.abhishekluv.in/blog/2014/01/19/mumbai-orchard-cms-user-group/"/>
    <updated>2014-01-19T22:05:19+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2014/01/19/mumbai-orchard-cms-user-group</id>
    <content type="html"><![CDATA[<p>&#8220;Mumbai Orchard CMS User Group&#8221; is a group for anyone interested in learning Orchard CMS. College , University students and Fresher web developers are welcome. Looking forward to exploring the world of Orchard CMS with everybody.</p>

<!-- more -->


<p>Let&#8217;s Meetup if you are an Orchard CMS Lover or a Newbie. We&#8217;ll have fun talking about Orchard CMS in this first Orchard CMS Mumbai Meetup. Happy Orcharding.</p>

<p><a href="http://www.meetup.com/Orchard-CMS-Mumbai-Meetup/">Mumbai Orchard CMS User Group - Meetup</a></p>

<p><a href="https://github.com/MumbaiOrchardCMSUserGroup">Mumbai Orchard CMS User Group - GitHub</a></p>

<p>We are also working on to launch a <a href="http://www.orchardcmsmumbai.org/">community website for Mumbai Orchard CMS User Group</a></p>

<p>Next : Let&#8217;s decide the Meetup place in Mumbai</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Orchard CMS for Absolute Beginners - Udemy course]]></title>
    <link href="http://www.abhishekluv.in/blog/2014/01/07/orchard-cms-for-absolute-beginners-udemy-course/"/>
    <updated>2014-01-07T17:34:46+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2014/01/07/orchard-cms-for-absolute-beginners-udemy-course</id>
    <content type="html"><![CDATA[<p>Orchard CMS for Absolute Beginners is a course about the latest open-source .NET Content Management System which is written in ASP.NET platform using the ASP.NET MVC framework.</p>

<!-- more -->


<p><a href="http://rkl.net.in/orchardcms" title="Orchard CMS for Absolute Beginners - Udemy Course">Orchard CMS for Absolute Beginners - Udemy Course</a></p>

<p>Grab it and do share it with your friends.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog Post]]></title>
    <link href="http://www.abhishekluv.in/blog/2014/01/07/my-first-blog-post/"/>
    <updated>2014-01-07T00:21:40+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2014/01/07/my-first-blog-post</id>
    <content type="html"><![CDATA[<p>My first blog post written using Markdown syntax</p>

<!-- more -->


<p>Blog powered by Octopress and Hosted by GitHub Pages</p>

<blockquote><p>Abhishek Luv</p></blockquote>
]]></content>
  </entry>
  
</feed>
