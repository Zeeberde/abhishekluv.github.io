<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Abhishek Luv]]></title>
  <link href="http://www.abhishekluv.in/atom.xml" rel="self"/>
  <link href="http://www.abhishekluv.in/"/>
  <updated>2016-09-11T22:28:46+05:30</updated>
  <id>http://www.abhishekluv.in/</id>
  <author>
    <name><![CDATA[Abhishek Luv]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[How-To Stay Wise and Happy]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/08/15/how-to-stay-wise-and-happy/"/>
    <updated>2016-08-15T16:37:02+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/08/15/how-to-stay-wise-and-happy</id>
    <content type="html"><![CDATA[<p>I have jotted down a list of points on How-To stay <em>Wise</em> and <em>Happy</em>.</p>

<!-- more -->


<ul>
<li>Always focus on improving yourself first.</li>
<li>Go through life with an open-mind and you will find a lot of open doors.</li>
<li>Be strong and bold</li>
<li>Create new good habits</li>
<li>In order to change your life, change your thoughts and habits.</li>
<li>Old ways wont open new doors.</li>
<li>Get out of your comfort zone. Get uncomfortable in order to succeed.</li>
<li>Depend on no-one but yourself.</li>
<li>You don&rsquo;t need too many friends. Try to create powerful and true friendships.</li>
<li>Forgive people and forget bad feelings, but most importantly: learn from all situations. The weak can never forgive. Forgiveness is an attribute of the strong.</li>
<li>Always keep good company</li>
<li>Expand the edges of your mind. As Bruce Lee said become water.</li>
<li>Speak wisely. Be sure to taste your words before you spit them out.</li>
<li>Make peace with the Past. The past is like an achor holding us back. You must let go of who you were in order to become who you will be.</li>
<li>Don&rsquo;t be to too nice to everyone. Niceness is seen as weakness and will be exploited. The problem with putting others first is that you&rsquo;ve taught them that you are second.</li>
<li>Never reveal your weaknesses to anyone.</li>
<li>Take decisions. Take bad decisions. Learn from those bad decisions and then take good decisions.</li>
<li>Always be you.</li>
<li>Remember same old thinking will not yield new results. Find out your old habit patterns and then act upon it.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Topics to Learn in C# Before Learning ASP.NET MVC(Video)]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/07/04/topics-to-learn-in-csharp-before-learning-asp-dot-net-mvc/"/>
    <updated>2016-07-04T15:59:33+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/07/04/topics-to-learn-in-csharp-before-learning-asp-dot-net-mvc</id>
    <content type="html"><![CDATA[<p>Topics to Learn in C# before Learning ASP.NET MVC.</p>

<p>For more please watch the video..</p>

<!-- more -->


<p></p>

<div class="youtube-container">
<div class="youtube-player" data-id="zZEu1ZRXwms" data-size="maxresdefault">
</div>
</div>


<p>Regards</p>

<blockquote><p>Abhishek Luv</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Students Should Learn C# Before Learning ASP NET MVC(Video)]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/07/01/why-students-should-learn-c-number-before-learning-asp-net-mvc/"/>
    <updated>2016-07-01T16:12:33+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/07/01/why-students-should-learn-c-number-before-learning-asp-net-mvc</id>
    <content type="html"><![CDATA[<p>Why Students should Learn C# before learning ASP NET MVC?</p>

<p>For more please watch the video..</p>

<!-- more -->


<p></p>

<div class="youtube-container">
<div class="youtube-player" data-id="9IZfBJ3hcy0" data-size="maxresdefault">
</div>
</div>


<p>Regards</p>

<blockquote><p>Abhishek Luv</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Want to Be a Software Developer? Let Go Off Perfection(Video)]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/07/01/want-to-be-a-web-developer-let-go-off-perfection/"/>
    <updated>2016-07-01T11:54:14+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/07/01/want-to-be-a-web-developer-let-go-off-perfection</id>
    <content type="html"><![CDATA[<p>Want to be a Software/Web Developer? Let go off Perfection.</p>

<p>Trying to become perfect at something will only stop your progess.</p>

<p>Instead you should try to develop a strong foundational knowledge about your favorite programming language or framework.</p>

<p>For more please watch the video..</p>

<!-- more -->




<div class="youtube-container">
<div class="youtube-player" data-id="SrKauGRcRls" data-size="maxresdefault">
</div>
</div>


<p>Regards</p>

<blockquote><p>Abhishek Luv</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update: I'm a Freelance ASP.NET MVC Trainer Now]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/06/30/update-im-a-freelance-trainer-now/"/>
    <updated>2016-06-30T12:27:47+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/06/30/update-im-a-freelance-trainer-now</id>
    <content type="html"><![CDATA[<p>Console.WriteLine(&ldquo;Hello! There&rdquo;);,</p>

<p>Just an update. I&rsquo;m a Freelance Trainer Now.</p>

<!-- more -->


<p>From 2014 I have been working as a Freelance ASP.NET MVC Developer and also as an Online Instructor creating courses on topics like Orchard CMS, ASP.NET MVC, Source Control : Git and GitHub.</p>

<p><small>Online Course Statistics</small>
<img src="http://i.imgur.com/GSiNEEX.png" alt="" /></p>

<p><small>Number of Students and Reviews</small>
<img src="http://i.imgur.com/PBy1wuB.png" alt="" /></p>

<p>I have found my passion and that is Teaching/Training and helping others learn things in a simple way.</p>

<p>I am available as a Freelance Trainer(topics: ASP.NET MVC, Entity Framework. C# and others&hellip;) for Training Centers, Institutes, Corporates across India and even Students on an individual basis.</p>

<p>Please <a href="http://www.abhishekluv.in/contact-me/">connect</a> with me if you&rsquo;re looking for a Freelance ASP.NET MVC Trainer.</p>

<blockquote><p>Regards</p>

<p>Abhishek Luv</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn C# in 7 Days : Day 2]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/04/09/learn-csharp-in-7-days-day-2/"/>
    <updated>2016-04-09T16:08:02+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/04/09/learn-csharp-in-7-days-day-2</id>
    <content type="html"><![CDATA[<p>Learning C# for beginners can be little difficult in the first place. But it isn&rsquo;t that difficult.</p>

<p>When starting to learn C# you should start with the basics and not get into the deep rabbit hole of it.</p>

<p>This is Day 2 of Learn C# in 7 Days. Checkout <a href="http://www.abhishekluv.in/blog/2016/04/09/learn-csharp-in-7-days-day-1/">Day 1</a> before starting with Day 2.</p>

<!-- more -->


<h2>Topics we&rsquo;ll be discussing</h2>

<ul>
<li>Classes</li>
<li>Objects</li>
<li>Constructor</li>
<li>Methods with returns values</li>
<li>Methods with Parameters and Arguments</li>
<li>This keyword</li>
<li>What is Object-Oriented Programming

<ul>
<li>Encapsulation</li>
<li>Polymorphism</li>
</ul>
</li>
</ul>


<h2>Classes</h2>

<p>A class is a template for creating an object.</p>

<pre><code>public class Employee
{
    // This is a constructor 
    public Employee()
    {

    }
    // This is the Data 
    public string Name;
    public int Age;

    // This is a method which performs actions on the data
    public void DisplayData()
    {
        Console.WriteLine(Name + Age);
    }
}
</code></pre>

<h2>Objects</h2>

<p>An Object is an instance of a class. In other word a snapshot or copy of a class having all the data and methods associated with it.</p>

<pre><code>public class Program
{
    static void Main()
    {
        Employee abhishekluv = new Employee();
        abhishekluv.DisplayData();
    }
}
</code></pre>

<p>The <code>new</code> keyword + <code>Employee()</code> the constructor <code>new Employee()</code> is used to create an object of a class i.e. an instance of a class.</p>

<h2>Constructor</h2>

<p>Every time you declare a class in C# there is a method <code>Public Employee()</code> created in the background automatically by the compiler having the same name as the class.</p>

<ul>
<li>Constructor is a method that has the same name as the class</li>
<li>Constructor is executed when an object is created</li>
<li>Constructor is used to set default/initial values for an object</li>
<li>Constructor doesn&rsquo;t return anything including <code>void</code></li>
</ul>


<p><strong>Play with the constructor</strong></p>

<pre><code>    public Employee()
    {
        Console.WriteLine("Constructor is fired");
    }
</code></pre>

<p><strong>Constructor with Parameters and Arguments</strong></p>

<p>For example: You have declared a class with two public variables and one public method.</p>

<p>As constructors are used to initial default values during object creation you can define those values using a parameterized constructor.</p>

<pre><code>class Employee
{
    public string Name;
    public int Age;

    public Employee()
    {
        Name = 6;
        Age = 5;

        Console.WriteLine("Ctor fired");
    }

    public Employee(string name, int age)
    {
        this.Name = name;
        this.Age = age;
    }
    public void DisplayData()
    {
        Console.WriteLine(Name + Age);
    }
}

// creating a new Employee object by calling the parameterized constructor
Employee abhishekluv = new Employee(3,4);
</code></pre>

<p>When an object of a class is created using the <code>new</code> keyword the constructor method is called to initialize values or get and set private variables using public method parameters and arguments.</p>

<p>In the above given example <code>public Employee(string name, int age)</code> is a parameterized constructor which has two parameters <code>string name</code> and <code>int age</code>.</p>

<h2>This keyword</h2>

<p><code>this</code> keyword is used to access the class level data members, variables and methods.</p>

<p>For example: In the above code, the <code>public Employee(string name, int age)</code> method takes in two arguments or data values for the two defined parameters <code>string name</code> and <code>int age</code>. At the time of object creation these values are applied to the member variables within the class using the this keyword <code>this.Name</code> and <code>this.Age</code>.</p>

<p>Why use <code>this</code> keyword? Because it makes it easy to differentiate between the declared method parameters and the class member variables with the same name. <code>name</code> is the parameter declared for the <code>DisplayData</code> methods and <code>this.Name</code> is used to access the class level member variables.</p>

<h2>Methods with returns values</h2>

<p>Ever wondered why the hell you keep seeing the <code>void</code> keyword everywhere when programming in C#.</p>

<p>Let&rsquo;s talk about it.</p>

<p>Every method performs actions using the data variables and members defined within a class. After performing those actions the method has to return the results of those actions or sometimes not return anything.</p>

<p><code>void</code> keyword is used when you don&rsquo;t want a method to return anything to the calling method/function. And when you want to return something using a method then you will have to specify the return data type of that method.</p>

<p><strong>Example:</strong></p>

<p><em>Note: Method names used in these examples are for educational purpose only. :P</em></p>

<pre><code>Public void IDontReturnAnything(){
    Console.WriteLine("Hello");    
}

Public string IReturnAStringValue()
    return "Hello";
}

Public string IReturnAIntValue()
    return 143;
}
</code></pre>

<h2>Methods with Parameters and Arguments</h2>

<p>One or more variables declared with the Method Signature are called Parameters.</p>

<p>For example:</p>

<p><code>public double FindArea(int length, int width) { }</code></p>

<p>In the above given example <code>int length</code> and <code>int width</code> are parameters declared for the <code>FindArea()</code></p>

<p>When a method is declared with parameters then it means that method can accept input values or in other words it can accept arguments.</p>

<p>The values which we pass to method parameters are called <code>Arguments</code>.</p>

<p>While calling the <code>FindArea()</code> method we can pass the values as argument which the <code>FindArea()</code> method can use for processing like this <code>FindArea(3,4)</code>.</p>

<h2>this Keyword</h2>

<p><code>this</code> keyword in C# is used to access the class level members and data.</p>

<p>In a C# class there are different types of variables.</p>

<ul>
<li>Class level variables (Global to the whole class)</li>
<li>Method level parameter variables (Local to that method only which a method can return)</li>
</ul>


<p>For example:</p>

<p>You have declared a class level variable as <code>int age;</code> and method level parameter variable as <code>int age</code>.</p>

<p>To access class level age use <code>this.age</code> and for method level parameter variable use <code>age</code>.</p>

<pre><code>public class Employee
{
    public int age;

    // this is a parameterized constructor with age as parameter and initializing the class level age variable 
    // using the this keyword
    public Employee(int age)
    {
        // Here we are using this.age to access the class level variables and then assigning the input value of age
       // coming from the age parameter of the constructor
        this.age = age;
    }

    public DisplayEmployeeAage()
    {
        Console.WriteLine("Age is = " + age);
    }
}
</code></pre>

<h2>Object-Oriented Programming</h2>

<p>Any programming language which follows 3 rules of OOP is called a Object-Oriented Programming Language.</p>

<p><strong>Rules for OOP:</strong></p>

<ul>
<li>Encapsulation : Data Hiding</li>
<li>Polymorphism : Overloading and Overriding</li>
</ul>


<p>Let&rsquo;s discuss each of these types in detail.</p>

<p><strong>Encapsulation</strong></p>

<p>Encapsulation is the concept of writing programs with data and methods that act on the data.</p>

<p>With encapsulation also comes another concept called Data Hiding. In data hiding we keep the data safe within the class and only accessible within the class. Now, that doesn&rsquo;t mean we won’t be able to access the class data outside it. Yes we can access the data using public methods declared within a class.</p>

<p>Data hiding concept can be applied by using access modifiers in front of classes, member variables and methods.</p>

<p><em>Commonly used access modifiers:</em></p>

<ul>
<li>public : accessible at class, sub-class and project level</li>
<li>protected : accessible at class and sub-class level</li>
<li>private : accessible at class level only</li>
</ul>


<p>Example:</p>

<pre><code>public class Sample
{
    private int age;
    public int salary { get; private set; }

    public int DisplaySalary()
    {
        return this.salary;
    }

    public void SetData(int age, int salary)
    {
        this.age = age;
        this.salary = salary;
    }

    public void DisplayData()
    {
        Console.Write("age is = " + age);
        Console.Write("salary is = " + salary);
    }
}

public class TestSample
{
    static void Main()
    {
        Sample sample = new Sample();
        sample.SetData(2, 333);
        sample.DisplayData();

        //the age variable of the sample cannot be accessed here
        // is inaccessible due to protection level
        // sample.age;
        // this is encapsulation and data hiding

        Console.Write("\n");

        Console.Write("salary is = " + sample.DisplaySalary());

        Console.ReadLine();
    }
}
</code></pre>

<p>In order to implement data hiding we can use <code>getter</code> and <code>setter</code> to limited read and write access to a particular data member in a class.</p>

<p>In this example we have used <code>get</code> and <code>private set</code> for the salary property <code>public int salary { get; private set; }</code>.</p>

<p><code>get</code> means <code>salary</code> property can be accessed outside of the <code>Sample</code> class and <code>private set</code> means <code>salary</code> property data can be set within the <code>Sample</code> class only and not from outside of the class.</p>

<p><strong>Polymorphism</strong></p>

<p>Polymorphism allows us to define multiple functions/methods/subroutines with the same name which are differentiated by their passing parameters and arguments. It is also known as method overloading or function overloading.</p>

<p>Example:</p>

<p>Let define a <code>Student</code> class with three methods with same name.</p>

<pre><code>public class Student{

    public string name;
    public int age;

    public Student(){
        // this is the constructor
    }

    public void DisplayData(string name){
        Console.WriteLine("Student Name is :" + name);
    }

    public void DisplayData(int age){
        Console.WriteLine("Student Age is: " + age);
    }

}
</code></pre>

<p>Here, we are creating an instance of the <code>Student</code> class and calling the <code>DisplayData</code> method using different argument values. In this case, we are passing a &ldquo;Abhishek&rdquo; as an argument for the <code>name</code> parameter and 27 as an argument for the <code>age</code> parameter. To make it simple to understand when we pass a name then the first <code>DisplayData</code> method will be called and for age the second <code>DisplayData</code> method will be called. This is Method Overloading.</p>

<pre><code>class TestStudent
{
    static void Main()
    {
        Student newStudent = new Student();

        newStudent.DisplayData("Abhishek");
        newStudent.DisplayData(27);
    }
}
</code></pre>

<p><em>Day 2 over</em></p>

<p>Stay Tuned.</p>

<p>Take Care!</p>

<p>Abhishek Luv</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn C# in 7 Days : Day 1]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/04/09/learn-csharp-in-7-days-day-1/"/>
    <updated>2016-04-09T07:07:42+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/04/09/learn-csharp-in-7-days-day-1</id>
    <content type="html"><![CDATA[<p>Learning C# for beginners can be little difficult in the first place. But it isn&rsquo;t that difficult.</p>

<p>When starting to learn C# you should start with the basics and not get into the deep rabbit hole of it.</p>

<p>This is Day 1 of Learn C# in 7 Days.</p>

<p>Let&rsquo;s begin&hellip;</p>

<!-- more -->


<h2>Things you&rsquo;ll need to get started</h2>

<ul>
<li>PC</li>
<li>Visual Studio Express or Community Edition</li>
<li>Interest to learn C#</li>
</ul>


<h2>Hello World Program</h2>

<p>Every programming language is made up by using words and letters known as Keywords.</p>

<p>While programming we use <code>letters</code> and <code>words</code> to form <code>expressions and statements</code> and then those <code>statements</code> can be used within isolated function bodies called as <code>methods</code>.</p>

<pre><code>    class ExampleHelloWorld
    {
        static void Main()
        {
            Console.WriteLine("Hello World");
        }
    }
</code></pre>

<p>In the above given example, <code>class</code>, <code>static</code>, <code>void</code> are keywords and <code>Main()</code> is a method defined by the end user which acts as the entry point for the <code>HelloWorld</code> program.</p>

<p>C# is an object-oriented programming language. We won’t be going into the topic of <code>Classes</code> and <code>Objects</code> as of now.</p>

<p>Let&rsquo;s dissect the above give example.</p>

<p><code>Console</code> is a C# class coming from the <code>System</code> namespace.</p>

<p>Object oriented programming is about creating objects from classes and then using variables and calling methods of those objects.</p>

<p>Similarly in the above given example <code>Console</code> is a class which has a method called <code>WriteLine</code> which prints a value or any data on the console.</p>

<p>Now, How and what will the <code>WriteLine</code> method print on the console? It won’t do anything on its own.</p>

<p>We need to instruct the <code>WriteLine</code> method what to print on the screen and we can do that by passing data to the method known as <code>arguments</code>.</p>

<pre><code>Console.WriteLine("Hello World");
</code></pre>

<p>in the above line of code we are passing a <code>string</code> i.e. &ldquo;Hello World&rdquo; to the <code>WriteLine</code> method. It’s the job of the <code>WriteLine</code> method to print the given data via arguments on the console screen.</p>

<h2>Comments in CSharp</h2>

<p>Code without comments and documentation is bad code.</p>

<p>Comments are lines of text which gives information about the flow of the program and what does a method do when it’s called.</p>

<p>There are three types of comments:</p>

<ul>
<li>Single line comments</li>
<li>Multi-Line comments</li>
<li>XML Documentation comments</li>
</ul>


<p><strong>Single-Line Comments</strong></p>

<pre><code>// this is variable with int data type
int myAge = 28;
</code></pre>

<p><strong>Multi-Line Comments</strong></p>

<pre><code>/* 
This is a multi line comments
You can write whatever you want
 */
</code></pre>

<p><strong>XML Documentation Comments</strong></p>

<pre><code>    /// &lt;summary&gt;
    /// This is the Main Method. It is an entry point for our application
    /// &lt;/summary&gt;
    static void Main()
    {
        string firstName = "Abhishek";

        string lastName = " Luv";

        string fullName = firstName + lastName;

        Console.WriteLine(fullName);
    }
</code></pre>

<p>XML documentation comments are used to write documentations for classes and methods in C#.</p>

<p>These XML comments are then used by Visual Studio to provide us information using Intellisense.</p>

<p>To write a XML comment just press <code>/</code> 3 times on any class or method.</p>

<h2>Data Types in CSharp</h2>

<p>Every programs needs memory and space to store data before it performs any operations and actions on the data.</p>

<p>Every value has a data type associated with it.</p>

<p>For example:</p>

<ul>
<li>A word like <code>Abhishek</code> will be of type <code>string</code> in C#</li>
<li>A numeric value like <code>12345</code> will be of type <code>int</code> in C#</li>
<li>A true or false value will be of type <code>bool</code> in C#</li>
<li>A numeric value like <code>233.33</code> will be of type <code>float</code> in C#
and so on&hellip;</li>
</ul>


<h2>Commonly used Data Types in CSharp</h2>

<ul>
<li>int : for numeric values</li>
<li>long : for larger numeric values</li>
<li>float : single-precision</li>
<li>double : double-precision</li>
<li>decimal : for very very very large numeric values</li>
<li>string : for storing words and text</li>
<li>bool : for storing true or false values</li>
</ul>


<h2>Declaring Variables using Data Types</h2>

<p>int example:</p>

<pre><code>data-type variable-name = variable-value;

int valueForA = 1200;
</code></pre>

<p>string example:</p>

<pre><code>string myName = "Abhishek Luv";
</code></pre>

<p>bool example:</p>

<pre><code>bool IsAvailable = true;
</code></pre>

<h2>Arithmetic Operators in CSharp</h2>

<ul>
<li>(+) : For addition</li>
<li>(-) : for subtraction</li>
<li>(*) : multiplication</li>
<li>/ : division</li>
<li>% : modulus</li>
<li>++ : increment</li>
<li>&ndash; : decrement</li>
</ul>


<p>These are the basic arithmetic operators used in C#. Let’s look at some sample code.</p>

<h2>Relational Operators in CSharp</h2>

<ul>
<li>(>) : Greater than</li>
<li>(&lt;) : Less than</li>
<li>(>=) : Greater than or equal to</li>
<li>(&lt;=) : Less than or equal to</li>
<li>(!=) : Not equal to</li>
<li>(==) : Equal to</li>
</ul>


<h2>Adding Number using in CSharp</h2>

<pre><code>    static void Main()
    {
        int a = 10; 
        int b = 20;

        int sum;

        // here we have used + operator for addition
        sum = a + b; 

        Console.WriteLine(sum);
    }
</code></pre>

<h2>Joining two string values using + Operator</h2>

<p>We can use the same + operator to join two string values in C#.</p>

<pre><code>    static void Main()
    {
        string firstName = "Abhishek";

        string lastName = " Luv";

        // here we have used + operator for joining two string values

        string fullName = firstName + lastName;

        Console.WriteLine(fullName);
    }
</code></pre>

<h2>Playing with If Else If Statement</h2>

<pre><code>    static void Main()
    {
        PlayingWithIf(20, 20);
    }

    static void PlayingWithIf(int x, int y)
    {
        if (x &lt; y)
        {
            Console.WriteLine("x is less than y");
        }

        else if (x &gt; y)
        {
            Console.WriteLine("x is greater than y");
        }

        else if (x == y)
        {
            Console.WriteLine("x is equal to y");
        }

        else
        {
            Console.WriteLine("invalid numbers");
        }
    }
</code></pre>

<p>In this example, we have a static void method called <code>PlayingWithIf</code> which uses <code>If Else If</code> statements with relational operators to print the desired output on the console screen. Don&rsquo;t worry about what is <code>static</code> and <code>void</code>. We&rsquo;ll come to that.</p>

<pre><code>if(x &lt; y) // if x is less than y then print "x is less than y"

else if(x &gt; y) // if x is greater than y then print "x is greater than y"

else if(x == y) // if x is equal to y then print "x is equal to y"

else....
</code></pre>

<p>Notice that the <code>PlayingWithIf</code> method takes in two <code>arguments</code> i.e. whenever the <code>PlayingWithIf</code> method is called we will have to provide two arguments or two values to the method.</p>

<pre><code>    static void Main()
    {
        PlayingWithIf(20, 20);
    }
</code></pre>

<p>Here, we are calling the <code>PlayingWithIf</code> method in our Main method with two arguments (20,20).</p>

<p>It’s always better to write a standalone method than stuffing the entire Main method with code.</p>

<h2>For Loop Statements</h2>

<p>A For loop statement is used for looping to perform actions based on the initial value and the test condition declared within a For loop.</p>

<p>For example: Lets print numbers 10 to 0 using a for loop</p>

<pre><code>    static void Main()
    {
        for (int i = 10; i &gt;= 0; i--)
        {
            Console.WriteLine(i);
        }
    }
</code></pre>

<p>In this example, we have declared a initial variable <code>int i</code> with a value of <code>10</code> i.e. we are saying the For loop to set the initial value equal to 10.</p>

<p><code>i &gt;= 0;</code> is the condition defined within the loop. This instructs the for loop to keep running the loop until the value <code>i</code> is greater than or equal to 0.</p>

<p><code>i--</code> is the action to performed by the for loop for us.</p>

<p>As the loop runs with the help of <code>i--</code> the value <code>i</code> is decremented by -1 till the condition <code>i &gt;= 0</code> is met.</p>

<h2>While Loop</h2>

<p>let’s look at the same example using a while loop in C#.</p>

<pre><code>    static void Main()
    {
        int i = 10; // initial variables declared

        while (i &gt;= 0) // test condition
        {
            Console.WriteLine(i);
            i--; // action to be performed every time the loop runs
        }
    }
</code></pre>

<p>In a While loop, we declare the initial variable and value outside the loop.</p>

<p>While loop starts with a test condition and then the body of the loop within curly braces {}.</p>

<p>Here, the condition is to keep running the loop until the value of i is greater than or equal to zero.</p>

<p>And the action to be performed in within the while loop i.e. <code>i--</code>.</p>

<h2>Do..While loop</h2>

<p>Do..While loop is very similar to the While loop but with only two differences.</p>

<p><strong>First Difference</strong></p>

<p>In a Do..While loop the statements inside the body of the loop are executed once before any conditions are met or the actions are performed by the loop.</p>

<p>For example:</p>

<pre><code>    static void Main()
    {
        int i = 0;

        do
        {
            Console.WriteLine(i);
            i++;
        } while (i &lt;= 10);
    }
</code></pre>

<p><strong>Second Difference</strong></p>

<p>Here, Initial value of <code>i</code> is 0. In a Do..While loop the condition is checked at the end of the loop and in a While loop at the beginning of the loop</p>

<p>And the actions <code>i++</code> is performed within the Do loop.</p>

<h2>Commonly used Logical Operators in CSharp</h2>

<ul>
<li>&amp;&amp; : logical AND</li>
<li>|| : logical OR</li>
</ul>


<p>Example:</p>

<pre><code>    static void Main()
    {
        CheckNumbers(10, 20);
    }

    static void CheckNumbers(int x, int y)
    {
        if (x &gt;= 0 &amp;&amp; y &gt;= 0)
        {
            Console.WriteLine("both numbers positive");
        }

        else if (x &gt;= 0 || y &gt;= 0)
        {
            Console.WriteLine("at least one num is positive");
        }
        else
        {
            Console.WriteLine("both are negative");
        }
    }
</code></pre>

<p>In the above given code, we have a method called <code>CheckNumbers</code>.</p>

<p>The <code>CheckNumbers</code> method takes in two arguments to check whether the numbers are positive or negative.</p>

<pre><code>if (x &gt;= 0 &amp;&amp; y &gt;= 0) 
// 10 &gt;= 0 &amp;&amp; 20 &gt;= 0 
// Result will be : both numbers are positive
</code></pre>

<p>Condition <code>10 &gt;= 0</code> will return true and <code>20 &gt;= 0</code> will also return true. So, true * true is true i.e. both numbers are positive.</p>

<p>Similarly OR <code>||</code> is used check at least one positive number and the <code>else</code> block executes when both the numbers are negative.</p>

<h2>Switch Case Statement</h2>

<p>Switch case statements are very similar to If statements. Switch case can be used with any data type.</p>

<p>In a switch case statement, we provide a value which it uses to compare with the cases defined within the switch statement and display appropriate results on the console.</p>

<p><em>Note: Case declared within a switch case statement has to be constant</em></p>

<pre><code>    static void Main(string[] args)
    {
        PlayingWithSwitchCase("three");
    }

    static void PlayingWithSwitchCase(string j)
    {
        switch (j)
        {
            case "two":
                Console.WriteLine("you entered four in words");
                break;
            case "three":
                Console.WriteLine("you entered three in words");
                break;
            default:
                Console.WriteLine("error");
                break;
        }
    }
</code></pre>

<h2>Arrays in CSharp</h2>

<p>Arrays are used to store a collection of data of similar data types.</p>

<p>For example: If you want to declared 5 int variable how will you do it?</p>

<p>Like this right?</p>

<pre><code>int a = 1;
int b = 2;
int c = 3;
int d = 4;
int e = 5;
</code></pre>

<p>Now, this is a lot of code. It’s better to use arrays to store 5 int values than using 5 different int variables.</p>

<p><strong>Declaring Arrays</strong></p>

<pre><code>int[] arrayName = new int[sizeofthearray];

int[] intArray = new int[5];
</code></pre>

<p>Now int[5] means that this array can hold 5 values. Values or data within an array can be accessed using an index.</p>

<p>For example:</p>

<pre><code>intArray[0], intArray[1] and so on...
</code></pre>

<p><em>Note: Index of an array starts from value 0. i.e. If you want to access the 5th value then you need to use intArray[4]</em></p>

<p><strong>Looping over an array to display data using For Looping</strong></p>

<pre><code>    for (int i = 0; i &lt; intArray.Length; i++)
    {
        Console.WriteLine(intArray[i]);
    }
</code></pre>

<p>The for loop uses the <code>intArray.Length</code> of the array to define a test condition for the loop.</p>

<p><strong>Looping over an array using ForEach loop</strong></p>

<pre><code>    foreach (int tempArrayValue in intArray)
    {
        Console.WriteLine(tempArrayValue);
    }
</code></pre>

<p>The ForEach loop uses a <code>tempArrayValue</code> variable to hold the array values one by one and display it on the console screen.</p>

<h2>Strings in CSharp</h2>

<p>Anything within double quotes <code>"Abhishek Luv"</code> in C# is a string.</p>

<p><strong>Declaring a string</strong></p>

<pre><code>string myName = "Abhishek Luv";
</code></pre>

<p><strong>Declaring an array of string</strong></p>

<pre><code>string[] allListOfName = { "Abhishek", "Abhijeet","Akshay" };
</code></pre>

<p><strong>Commonly used String functions</strong></p>

<ul>
<li>ToUpper()</li>
<li>ToLower()</li>
<li>SubString()</li>
<li>IndexOf</li>
</ul>


<p><strong>Looping over an array of string using foreach loop</strong></p>

<pre><code>foreach (string names in allListOfName)
{
   Console.WriteLine(names);
}
</code></pre>

<p><em>Day 1 over</em></p>

<p>Stay Tuned.</p>

<p>Take Care!</p>

<p>Abhishek Luv</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Orchard CMS Theme Development Course Is FREE Now]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/04/08/orchard-cms-theme-development-course-is-free-now/"/>
    <updated>2016-04-08T17:18:12+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/04/08/orchard-cms-theme-development-course-is-free-now</id>
    <content type="html"><![CDATA[<p>Access to Orchard CMS Theme Development course is FREE and open to all.</p>

<!-- more -->




<iframe width="560" height="315" src="https://www.youtube.com/embed/videoseries?list=PL8AwaH3ssiARImeICwvOavU_Gna-Xza_7" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Orchard CMS Recipes Course Is FREE Now]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/04/08/orchard-cms-recipes-course-is-free-now/"/>
    <updated>2016-04-08T17:17:56+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/04/08/orchard-cms-recipes-course-is-free-now</id>
    <content type="html"><![CDATA[<p>Access to Orchard CMS Recipes course is FREE and open to all.</p>

<!-- more -->




<iframe width="560" height="315" src="https://www.youtube.com/embed/videoseries?list=PL8AwaH3ssiASskvNYC69I-FKr3kjcBo8X" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Orchard CMS Workflows Course Is FREE Now]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/04/08/orchard-cms-workflows-course-is-free-now/"/>
    <updated>2016-04-08T17:17:46+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/04/08/orchard-cms-workflows-course-is-free-now</id>
    <content type="html"><![CDATA[<p>Access to Orchard CMS Workflows course is FREE and open to all.</p>

<!-- more -->




<iframe width="560" height="315" src="https://www.youtube.com/embed/videoseries?list=PL8AwaH3ssiASR5GeZtPvKnyOAGogyMnjt" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monthly Review : Feb &amp; March 2016]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/03/25/monthly-review-feb-and-march-2016/"/>
    <updated>2016-03-25T07:40:35+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/03/25/monthly-review-feb-and-march-2016</id>
    <content type="html"><![CDATA[<p>This is my second monthly review. Keeping a note of every task, I have really helped myself to stay more focused and measure my progress in a better way.</p>

<p><em>As I had mentioned in one of my <a href="http://www.abhishekluv.in/blog/2015/12/21/plans-for-year-2016/">previous post</a> that I will be keeping track of every task I do and blog about it online.</em></p>

<p>I couldn&rsquo;t post my last months monthly review due to flu :(</p>

<!-- more -->


<h2>Review for Feb &amp; March 2016</h2>

<ul>
<li>I was looking forward to this in the month of Feb but registration for a <a href="http://www.vridhamma.org/VRI-Introduction">10-day Vipassana Meditation programme was full</a> :(</li>
<li>Stumbled upon a video <a href="https://www.youtube.com/watch?v=3aiJe6JiIPw">&ldquo;30 Day Mental Fast&rdquo; by Jerry Clark</a></li>
<li>Finished listening an Audio book called <a href="http://www.proctorgallagherinstitute.com/success-puzzle/download">&ldquo;The Success Puzzle&rdquo; by Bob Proctor</a></li>
<li>Attended a 1 Day Workshop on &ldquo;Cyber Security&rdquo; organized by &ldquo;Princeton Academy&rdquo;</li>
<li>Worked on some freelancing projects</li>
<li>Stumbled upon a video <a href="https://www.youtube.com/watch?v=L7kSyJ1nQ4s">&ldquo;The Success Triangle&rdquo; by Jerry Clark</a></li>
<li>Started using Facebook after a 60Day Facebook Mental Fast :)</li>
<li>Read a lot of articles about SEO. I&rsquo;ll be posting a post about SEO very soon.</li>
</ul>


<p>Stay tuned.</p>

<p>Take care!</p>

<p>Abhishek Luv</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Dillinger as a FREE Markdown Editor]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/03/03/using-dillinger-as-a-free-markdown-editor/"/>
    <updated>2016-03-03T07:09:38+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/03/03/using-dillinger-as-a-free-markdown-editor</id>
    <content type="html"><![CDATA[<p>I just Love Markdown. I&rsquo;m a Markdown fan. Markdown is a plain text formatting syntax designed so that it can be converted to HTML. Markdown syntax  is pretty easy to learn and use. If you are a developer then you would have already used it.</p>

<!-- more -->


<p><strong>Why use Markdown</strong></p>

<ul>
<li>It&rsquo;s easy to learn and use</li>
<li>It&rsquo;s fast : Faster than any rich-text editor</li>
<li>It&rsquo;s clean : Generates perfectly-formed HTML</li>
</ul>


<p><strong>How can you use Markdown</strong></p>

<ul>
<li>For writing blog posts : Every blogging system has support to convert Markdown syntax into HTML</li>
<li>For writing project documentations on GitHub</li>
<li>For writing emails</li>
<li>For taking notes and then exporting them as a PDF file or Styled HTML document</li>
</ul>


<p>I use <a href="http://markdownpad.com/">MarkdownPad</a> which is a Paid Markdown editor.</p>

<p>Say Hello to <a href="http://dillinger.io/">Dillinger</a> a Free Online Markdown editor with amazing features.</p>

<p><img src="http://i.imgur.com/NOpOxGa.png" alt="" /></p>

<p><strong>Features of Dillinger</strong></p>

<ul>
<li>Autosave</li>
<li>Word count</li>
<li>Scroll sync : Scroll sync for markdown and preview windows</li>
<li>Import markdown files from Dropbox, GitHub, Google and One Drive</li>
<li>Export markdown files into HTML, Styled HTML and PDF</li>
</ul>


<p>If you are new to Markdown, then download this <a href="https://www.gitbook.com/download/pdf/book/gitbookio/markdown">Free PDF book on Markdown.</a></p>

<p>Thank you for reading.</p>

<p>Stay tuned!</p>

<p>Take care</p>

<p>Abhishek Luv</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Studio Keyboard Shortcuts for Productivity]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/02/27/visual-studio-keyboard-shortcuts-for-productivity/"/>
    <updated>2016-02-27T03:40:08+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/02/27/visual-studio-keyboard-shortcuts-for-productivity</id>
    <content type="html"><![CDATA[<p>In this post, I&rsquo;ll be sharing the Visual Studio keyboard shortcuts that I use everyday and using keyboard shortcuts really helps me to become more productivity.</p>

<!-- more -->


<p><strong>1. Ctrl + .</strong> : Allows you to create a new type or add a using reference.</p>

<p><strong>2. Ctrl + ,</strong> : Allows you to Search and Navigate to a code file within your solution.</p>

<p><strong>Ctrl + Q </strong> : Allows you to Access the Quick launch search bar.</p>

<p><strong>Ctrl + ;</strong> : Allows yout to access Solution explorer search.</p>

<p><strong>F5</strong> : To start with debugging.</p>

<p><strong>Ctrl + F5</strong> : To start without debugging.</p>

<p><strong>Ctrl + Shift + A</strong> : Allows you to open the Add New Item window.</p>

<p><strong>F12 on a literal</strong> : Allows you to view a literal definition.</p>

<p><strong>Shift + F12</strong> : Shows a list of files using a particular literal within a project.</p>

<p><strong>Alt + F12</strong> : Allows you to have a peek look at a literal definition.</p>

<p><strong>Ctrl + Tab</strong> : Browsing opened code files within Visual Studio.</p>

<p>Thank you for reading.</p>

<p>Stay tuned!</p>

<p>Take care</p>

<p>Abhishek Luv</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Beginner's Series : Part 1]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/02/25/javascript-beginner-series/"/>
    <updated>2016-02-25T20:10:38+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/02/25/javascript-beginner-series</id>
    <content type="html"><![CDATA[<p>Welcome to the JavaScript Beginner&rsquo;s Series.</p>

<h2>Topics we&rsquo;ll be covering</h2>

<p><strong>Part 1</strong></p>

<ul>
<li>JavaScript Overview</li>
<li>Ways to add JavaScript code on a HTML page</li>
<li>Variables, DataTypes, Operators and Expressions</li>
</ul>


<!-- more -->


<p><strong>Part 2 (Coming Soon)</strong></p>

<ul>
<li>Conditional Statements : if, else, if else if, switch</li>
<li>Looping Statements : while, do..while, for, for..in</li>
</ul>


<p><strong>Part 3 (Coming Soon)</strong></p>

<ul>
<li>Functions</li>
<li>Arrays</li>
<li>Understanding the Scope : Availability of variables globally or locally</li>
</ul>


<p><strong>Part 4 (Coming Soon)</strong></p>

<ul>
<li>Understanding Objects Literals</li>
<li>Objects in JavaScripts : Number, Boolean, String, Date, Math</li>
<li>Understanding the DOM : Document Object Model</li>
</ul>


<h2>JavaScript Beginner&rsquo;s Series : Part 1</h2>

<h3>JavaScript Overview</h3>

<p>JavaScript is the assembly language of the Web. JavaScript is a high-level, dynamic, untyped, and interpreted programming language.  Do not confuse JavaScript with Java.</p>

<p>In this beginner&rsquo;s series, we&rsquo;ll be learning the basic building blocks of JavaScript that every beginner or a newbie needs to know.</p>

<h3>Ways to add JavaScript code on a HTML page</h3>

<p><strong>Adding JavaScript Code using the <code>&lt;script&gt;&lt;/script&gt;</code> tag with the <code>type</code> attribute</strong></p>

<div><script src='https://gist.github.com/8edd49cd1e018dec570e.js'></script>
<noscript><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        // your javascript code will go here
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></noscript></div>


<p><strong>Adding JavaScript file using the <code>src</code> attribute of the <code>&lt;script&gt;&lt;/script&gt;</code> tag in the <code>&lt;head&gt;&lt;/head&gt;</code> section</strong></p>

<div><script src='https://gist.github.com/f122e9128c71db141ac1.js'></script>
<noscript><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;/Scripts/custom.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></noscript></div>


<p>JavaScript code or file is placed in the <code>&lt;head&gt;</code> section when you want to run some code on a click event somewhere on your web page.</p>

<p><strong>Adding JavaScript code or file using the <code>&lt;script&gt;&lt;/script&gt;</code> tag in the <code>&lt;body&gt;&lt;/body&gt;</code> section</strong></p>

<div><script src='https://gist.github.com/b047d396dcc4ba6d16d0.js'></script>
<noscript><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
   
    &lt;!-- adding JavaScript code using embedding code --&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
    
    &lt;/script&gt;

    &lt;!-- adding JavaScript code using an external file --&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;/Scripts/custom.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>


<p>JavaScript code or file is placed in the <code>&lt;body&gt;</code> section when you want to generate some content on the web page using some JavaScript code as soon as the page loads.</p>

<h3>Variables, DataTypes, Operators and Expressions</h3>

<p><strong>Variables</strong></p>

<p><code>var</code> keyword is used to declare a variable in JavaScript. You should always use the <code>var</code> keyword to declare a variable in JavaScript.</p>

<p>Types of variables in JavaScript :</p>

<ul>
<li>Global variables (Global Scope)</li>
<li>Local and Block level variables (Local Scope)</li>
</ul>


<p>Variables in JavaScript are written in CamelCase for ex: <code>isItGlobal</code>.</p>

<p>Let&rsquo;s look at some code.</p>

<div><script src='https://gist.github.com/7822828e8f6a68e89a4a.js'></script>
<noscript><pre><code>isItGlobal = &quot;variable with global scope&quot;; // this variable is global

function localFunction() {
    var isItGlobal = &quot;variable with local scope&quot;; // this variable is local to the local Function
    document.write(isItGlobal + &quot;&lt;br/&gt;&quot;);
}

document.write(isItGlobal + &quot;&lt;br/&gt;&quot;);
localFunction();
</code></pre></noscript></div>


<p><strong>Data Types</strong></p>

<ul>
<li>Numbers : eg: 157, 457</li>
<li>Strings : eg: &ldquo;This is string&rdquo;, &lsquo;This is string&rsquo;</li>
<li>Booleans : eg: true or false</li>
<li>Undefined</li>
</ul>


<p>In JavaScript, datatype is inferred by the type of data or value assigned for a variable.</p>

<p>For ex: If we assign 124 value to a variable <code>var myValue = 124</code>. The data type for <code>myValue</code> will be <code>Number</code>.</p>

<p>Let&rsquo;s look at some code and find out the data type of a variable (using the typeof keyword).</p>

<div><script src='https://gist.github.com/12def5fc1d24314305b1.js'></script>
<noscript><pre><code>// Let&#39;s declare 4 variable and print it on a web page

var myVariable = &quot;I&#39;m a variable&quot;;
var myVariable2 = 1234;
var myVariable3 = true;
var myVariable4; // we haven&#39;t assigned a value for this variable. Lets see what happens

document.write(myVariable + &quot;&lt;br/&gt;&quot;);
document.write(myVariable2 + &quot;&lt;br/&gt;&quot;);
document.write(myVariable3 + &quot;&lt;br/&gt;&quot;);

// Now let&#39;s look at the type of a given variable by using the typeof keyword

document.write(&quot;myVariable is of type : &quot; + typeof myVariable + &quot;&lt;br/&gt;&quot;); 
document.write(&quot;myVariable2 is of type : &quot; + typeof myVariable2 + &quot;&lt;br/&gt;&quot;);
document.write(&quot;myVariable3 is of type : &quot; + typeof myVariable3 + &quot;&lt;br/&gt;&quot;);
document.write(typeof myVariable4);

// Output
//I&#39;m a variable
//1234
//true
//myVariable is of type : string
//myVariable2 is of type : number
//myVariable3 is of type : boolean
//undefined</code></pre></noscript></div>


<p><strong>Operators</strong></p>

<p>Operators allows us to compute data in a programming language.</p>

<p>JavaScript support the following types of operators :</p>

<ul>
<li>Arithmetic</li>
<li>Comparison</li>
<li>Logical</li>
<li>Assignment</li>
<li>Ternary</li>
</ul>


<p>In order for an operator to work it needs two operands.</p>

<p>For ex:</p>

<p><code>4 + 5 = 9</code> Here, 4 and 5 are the two operands and <code>+</code> is the operator.</p>

<p><strong>Arithmetic Operator</strong></p>

<div><script src='https://gist.github.com/557a912dea9e8b7a11d1.js'></script>
<noscript><pre><code>var a = 50;
var b = 20;

document.write(&quot;add : &quot;, a + b);
document.write(&quot;&lt;br/&gt;&quot;);
document.write(&quot;sub : &quot;, a - b);
document.write(&quot;&lt;br/&gt;&quot;);
document.write(&quot;mul : &quot;, a * b);
document.write(&quot;&lt;br/&gt;&quot;);
document.write(&quot;div : &quot;, a / b);
document.write(&quot;&lt;br/&gt;&quot;);
document.write(&quot;modulus : &quot;, a % b);
document.write(&quot;&lt;br/&gt;&quot;);
document.write(&quot;increment : &quot;, ++a);
document.write(&quot;&lt;br/&gt;&quot;);
document.write(&quot;decrement : &quot;, --b);</code></pre></noscript></div>


<p><strong>Comparison Operator</strong></p>

<div><script src='https://gist.github.com/7ce55ae7931c868ca91f.js'></script>
<noscript><pre><code>var a = 50;
var b = 20;

document.write(&quot;greater than : &quot;, a &gt; b);
document.write(&quot;&lt;br/&gt;&quot;);
document.write(&quot;less than : &quot;, a &lt; b);
document.write(&quot;&lt;br/&gt;&quot;);
document.write(&quot;not equal : &quot;, a != b);
document.write(&quot;&lt;br/&gt;&quot;);
document.write(&quot;equal too : &quot;, a == b);
document.write(&quot;&lt;br/&gt;&quot;);
document.write(&quot;greater than or equal too : &quot;, a &gt;= b);
document.write(&quot;&lt;br/&gt;&quot;);
document.write(&quot;less than or equal too : &quot;, a &lt;= b);
document.write(&quot;&lt;br/&gt;&quot;);

// OutPut
//greater than : true
//less than : false
//not equal : true
//equal too : false
//greater than or equal too : true
//less than or equal too : false</code></pre></noscript></div>


<p><strong>Logical Operator</strong></p>

<div><script src='https://gist.github.com/e46ce97071308ded879c.js'></script>
<noscript><pre><code>var a = true;
var b = false;

document.write(&quot;a &amp;&amp; b : &quot;, a &amp;&amp; b);
document.write(&quot;&lt;br/&gt;&quot;);


document.write(&quot;a || b : &quot;, a || b);
document.write(&quot;&lt;br/&gt;&quot;);

document.write(&quot;logical not : &quot;, !(a &amp;&amp; b));
document.write(&quot;&lt;br/&gt;&quot;);

// OutPut
//a &amp;&amp; b : false
//a || b : true
//a | b : true</code></pre></noscript></div>


<p><strong>Assignment Operator</strong></p>

<p>The Assignment assigns values from the right side operand to the left side operand.</p>

<p>+= (Add &amp; Assignment) : adds the right operand to the left operand and assigns the result to the left operand.</p>

<p>-= (Subtract &amp; Assignment) : subtract the right operand to the left operand and assigns the result to the left operand.</p>

<p>*= (Multiple &amp; Assignment) : Multiples the right operand to the left operand and assigns the result to the left operand.</p>

<p>/= (Division &amp; Assignment) : Divides the right operand to the left operand and assigns the result to the left operand.</p>

<p>%= (Modulus &amp; Assignment) : Modulus operation happens from right operand to left operand and assigns the result to the left operand.</p>

<div><script src='https://gist.github.com/294352c796dbe108b330.js'></script>
<noscript><pre><code>var a = 50;
var b = 20;

document.write(&quot;a = b = &gt; &quot;, a = b);
document.write(&quot;&lt;br/&gt;&quot;);

document.write(&quot;a = a + b = &gt; &quot;, a += b);
document.write(&quot;&lt;br/&gt;&quot;);

document.write(&quot;a = a - b = &gt; &quot;, a -= b);
document.write(&quot;&lt;br/&gt;&quot;);

document.write(&quot;a = a * b = &gt; &quot;, a *= b);
document.write(&quot;&lt;br/&gt;&quot;);

document.write(&quot;a = a / b = &gt; &quot;, a /= b);
document.write(&quot;&lt;br/&gt;&quot;);

document.write(&quot;a = a % b = &gt; &quot;, a %= b);
document.write(&quot;&lt;br/&gt;&quot;);

// Output
//a = b = &gt; 20
//a = a + b = &gt; 40
//a = a - b = &gt; 20
//a = a * b = &gt; 400
//a = a / b = &gt; 20
//a = a % b = &gt; 0</code></pre></noscript></div>


<p><strong>Ternary Operator</strong></p>

<p>The Ternary operator first checks the expressions for a true or false value and then executes the given statements.</p>

<p>For ex:</p>

<div><script src='https://gist.github.com/7b6348e972f27f5c0269.js'></script>
<noscript><pre><code>var someValue = 25;
var myResult = &quot;&quot;;
var myResult1 = &quot;&quot;;
myResult = (someValue == 24) ? &quot;equal&quot; : &quot;not equal&quot;;
myResult1 = (someValue == 25) ? &quot;equal&quot; : &quot;not equal&quot;;
document.write(myResult);
document.write(&quot;&lt;br/&gt;&quot;);
document.write(myResult1);
</code></pre></noscript></div>


<p><em>Part 2 coming soon</em></p>

<p>Thank you for reading.</p>

<p>Stay tuned!</p>

<p>Take care</p>

<p>Abhishek Luv</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decisions That Changed My Life : Part 2]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/02/20/decisions-that-changed-my-life-part-2/"/>
    <updated>2016-02-20T21:25:28+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/02/20/decisions-that-changed-my-life-part-2</id>
    <content type="html"><![CDATA[<p>Decisions That Changed My Life : Part 2.</p>

<!-- more -->


<ul>
<li>Putting myself first</li>
<li>Eating less, Feeling better and letting the body repair itself</li>
<li>Being more conscious</li>
<li>Being myself</li>
<li>Staying grounded</li>
<li>Taking time to get to know myself</li>
<li>Being good to myself</li>
<li>Never regretting about past failures</li>
<li>Being responsible for my beliefs</li>
<li>Avoiding negative environments</li>
<li>Not aiming for perfection</li>
<li>Accepting my past mistakes and experiences</li>
</ul>


<p>Thank you for reading.</p>

<p>Stay tuned!</p>

<p>Take care</p>

<p>Abhishek Luv</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monthly Review : January 2016]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/01/29/monthly-review-january-2016/"/>
    <updated>2016-01-29T22:08:14+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/01/29/monthly-review-january-2016</id>
    <content type="html"><![CDATA[<p>This is my first monthly review. Keeping a note of every task, I have really helped myself to stay more focused and measure my progress in a better way.</p>

<p><em>As I had mentioned in one of my <a href="http://www.abhishekluv.in/blog/2015/12/21/plans-for-year-2016/">previous post</a> that I will be keeping track of every task I do and blog about it online.</em></p>

<!-- more -->


<h2>Review for January 2016</h2>

<ul>
<li>Stopped using Facebook :P</li>
<li>Finished listening to an audio book &ldquo;Living Health&rdquo; by Tony Robbins</li>
<li>Launched <a href="https://www.youtube.com/channel/UCAQxeMbUaKePrVE3wbNZxjg">Orchard Beginner YouTube channel</a></li>
<li>Completed and Uploaded <a href="https://www.youtube.com/channel/UCAQxeMbUaKePrVE3wbNZxjg/playlists?view=1&amp;flow=list&amp;sort=da">3 course modules for Orchard Beginner</a></li>
<li>Finished reading a book called <a href="http://www.amazon.in/Your-Erroneous-Zones-Step-Step/dp/0060919760">&ldquo;Your Erroneous Zone&rdquo;</a> by Wayne dyer</li>
<li>Integrated <a href="https://www.instamojo.com/">InstaMojo</a> with Develop2Deploy for accepting and receiving payments</li>
<li>Completed 2 courses for Develop2Deploy(Sorry the Website and Courses are still offline and underdevelopment)</li>
<li>Read a 35 page book <a href="http://www.amazon.in/gp/product/B00FIZ5G3I?psc=1&amp;redirect=true&amp;ref_=oh_aui_d_detailpage_o00_">&ldquo;The Opinionated Software Developer: What Twenty-Five Years of Slinging Code Has Taught Me&rdquo;</a> by Shawn Wildermuth</li>
</ul>


<p>Stay tuned.</p>

<p>Take care!</p>

<p>Abhishek Luv</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ways in Which You Can Contribute to Open Source Projects]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/01/28/ways-in-which-you-can-contribute-to-open-source-projects/"/>
    <updated>2016-01-28T16:49:57+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/01/28/ways-in-which-you-can-contribute-to-open-source-projects</id>
    <content type="html"><![CDATA[<p>I love open source projects and contributing to open source projects has helped me in many ways.</p>

<h2>Benefits of contributing to open source projects:</h2>

<ul>
<li>Opportunity to meet new people online</li>
<li>Community owners and contributors will trust you without meeting you in person</li>
<li>Community appreciations</li>
<li>and many more&hellip;</li>
</ul>


<p>Never contributed to any open source project?</p>

<!-- more -->


<p>No problem. Find an open source project in your area of interest and start contributing.</p>

<p>Let me share my contributing experience and how I started contributing to an open source project called &ldquo;Orchard&rdquo;.</p>

<p>BTW.</p>

<p>Orchard CMS is a free, open source, community-focused Content Management System built on the ASP.NET MVC platform.</p>


<p>Orchard is delivered under the .NET Foundation <a href="http://www.dotnetfoundation.org/orchard">http://www.dotnetfoundation.org/orchard</a>. For more info on Orchard visit the official website <a href="http://www.orchardproject.net/">http://www.orchardproject.net/</a>
and for more Orchard CMS tutorials subscribe to <a href="https://www.youtube.com/channel/UCAQxeMbUaKePrVE3wbNZxjg">Orchard Beginner YouTube channel.</a></p>


<p>Let&rsquo;s talk about the ways in which you can contribute to open source projects.</p>

<ul>
<li>Write documentations</li>
<li>Create tutorials</li>
<li>Create premium tutorials</li>
<li>Contribute source code or Help find/fix bugs</li>
<li>Spread the word and your knowledge</li>
<li>Appreciating the community and not be a jerk</li>
<li>Interview other open source contributors and share knowledge</li>
</ul>


<h2>Write documentations</h2>

<p>Most open source projects lack good documentation and this is an opportunity for you as a newbie or an experienced developer to put in some efforts and start writing documentations for your favourite open source project.</p>

<p>Most of the open source documentations are written in .md Markdown so make sure to learn Markdown before starting to contribute/fix documentations.</p>

<p>Community owners and members really appreciate genuine contributors and might give write/push access to the documentation repository.</p>

<p>For example:</p>

<p><a href="http://docs.orchardproject.net/Contributors">http://docs.orchardproject.net/Contributors</a></p>

<h2>Create tutorials</h2>

<p>After writing some documentation and gaining some experience with an open source project you can move to the next level and start creating video tutorials which will ultimately help new community members and shorten the learning curve.</p>

<p>Creating tutorials and uploading them on YouTube comes with added bonus i.e. <a href="http://orchardbeginner.com/">more traffic to your own blog or website</a> which can bring in some nice exposure for you as a contributor/developer.</p>

<p>For example:</p>

<p>It makes me feel so appreciated when other developers and contributors share my tutorial and course links on Stackoverflow.</p>

<p><a href="http://stackoverflow.com/a/11452276">http://stackoverflow.com/a/11452276</a></p>

<h2>Create premium tutorials</h2>

<p>With uploading free tutorials on YouTube you can even start selling premium tutorials and courses via online platforms like Udemy.</p>

<p>For example:</p>

<p>After creating my first Orchard tutorial series I created 2 premium courses and the response I got from the community and subscribers were astonishing. All of my Orchard courses are listed on the official documentation website of Orchard.</p>

<p><a href="http://docs.orchardproject.net/Documentation/Orchard-TV">http://docs.orchardproject.net/Documentation/Orchard-TV</a></p>

<h2>Contribute source code or Help find/fix bugs</h2>

<p>The number one way to help out is find/fix bugs for your favourite open source project. Found a bug fix it or let other community contributors know about it.</p>

<p>Most of the open source projects are hosted on GitHub so make sure to learn Git and GitHub before creating issues/pull requests for your favourite open source project.</p>

<p>For example:</p>

<p>The community owners and members appreciated my contribution with a shout out.</p>

<p><a href="http://docs.orchardproject.net/Documentation/Orchard-1-9.Release-Notes#Contributors">http://docs.orchardproject.net/Documentation/Orchard-1-9.Release-Notes#Contributors</a></p>

<h2>Spread the word and your knowledge</h2>

<p>You can go and tell the world about your favourite open source project. Tweet about it. Blog about it. Just help get the word out and make the project more popular.</p>

<p><a href="http://orchardbeginner.com/">http://orchardbeginner.com/</a></p>

<h2>Appreciating the community and not be a jerk</h2>

<p>Never ever act like a jerk while interacting with the community contributors and members. Never try to take them for granted.</p>

<h2>Interview other open source contributors and share knowledge</h2>

<p>You can even interview other contributors of your favourite open source projects and share the knowledge.</p>

<p>If you have any other ideas on how to contribute, please share them below in the comments.</p>

<p>Stay tuned.</p>

<p>Take care!</p>

<p>Abhishek Luv</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Important Things to Do When Installing Orchard CMS for the First Time]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/01/27/important-things-to-do-when-installing-orchard-cms-for-the-first-time/"/>
    <updated>2016-01-27T22:08:24+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/01/27/important-things-to-do-when-installing-orchard-cms-for-the-first-time</id>
    <content type="html"><![CDATA[<p>Important things to do when installing <em>Orchard CMS</em> for the first time.</p>

<!-- more -->


<ul>
<li>Giving write permissions to the following folders(App_Data,Modules,Themes,Media) applicable for IIS/Web Hosts only and not for WebMatrix and IIS express.</li>
<li>Installing Orchard with a pre-defined recipe or with a custom recipe (optional)</li>
<li>Remove Home page title and text</li>
<li>Configure your site settings properly</li>
<li>Configure your cache settings properly</li>
<li>Configure the email module with valid SMTP details (so that the reset password works when you forget your password)</li>
<li>Configure Antispam modules</li>
<li>Enable warmup module for performance boost(Orchard creates static versions of specified pages)</li>
<li>Hide the meta published part if you want to hide the published dates for pages using placement.info file in your custom theme</li>
<li>Check if the version you&rsquo;re using is the latest version.</li>
<li>Assigning administrator roles to the admin user</li>
<li>Adding an email address for the admin user</li>
<li>Enabling database and file system output cache(Optional/If required)</li>
<li>Enabling Audit trail module to monitor backend activities on your website(optional)</li>
<li>Remember to turn off unwanted modules</li>
<li>Copy the settings.txt file and save it in a secure place (for future use/backup)</li>
<li>Enabling import/export and creating a recipe of your website (for future use/backup)</li>
</ul>


<p>New to Orchard CMS?</p>


<p>Orchard CMS is a free, open source, community-focused Content Management System built on the ASP.NET MVC platform.</p>


<p>Orchard is delivered under the .NET Foundation <a href="http://www.dotnetfoundation.org/orchard">http://www.dotnetfoundation.org/orchard</a>. For more info on Orchard visit the official website <a href="http://www.orchardproject.net/">http://www.orchardproject.net/</a>
and for more Orchard CMS tutorials subscribe to <a href="https://www.youtube.com/channel/UCAQxeMbUaKePrVE3wbNZxjg">Orchard Beginner YouTube channel.</a></p>


<p>Stay tuned.</p>

<p>Take care!</p>

<p>Abhishek Luv</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Orchard Beginner Module 1 : Getting Started (Completed)]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/01/26/orchard-beginner-module-1-getting-started-completed/"/>
    <updated>2016-01-26T13:33:24+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/01/26/orchard-beginner-module-1-getting-started-completed</id>
    <content type="html"><![CDATA[<p>Orchard Beginner Module 1 : Getting Started completed.</p>

<p>Orchard CMS Tutorials brought to you by Orchard Beginner <a href="http://orchardbeginner.com/">http://orchardbeginner.com/</a></p>

<p><em>Note: As I had mentioned in one of my <a href="http://www.abhishekluv.in/blog/2015/12/21/plans-for-year-2016/">previous post</a> that I will be keeping track of every task I do and blog about it online.</em></p>

<!-- more -->




<iframe width="560" height="315" src="https://www.youtube.com/embed/CbBuiHj0Qkg?list=PL8AwaH3ssiATad095YNAoaIxHVkoh4Yky" frameborder="0" allowfullscreen></iframe>




<p>New to Orchard CMS?</p>


<p>Orchard CMS is a free, open source, community-focused Content Management System built on the ASP.NET MVC platform.</p>


<p>Orchard is delivered under the .NET Foundation <a href="http://www.dotnetfoundation.org/orchard">http://www.dotnetfoundation.org/orchard</a>. For more info on Orchard visit the official website <a href="http://www.orchardproject.net/">http://www.orchardproject.net/</a>
and for more Orchard CMS tutorials subscribe to <a href="https://www.youtube.com/channel/UCAQxeMbUaKePrVE3wbNZxjg">our Orchard Beginner YouTube channel</a> or bookmark Orchard Beginner website for future reference.</p>


<p>Stay tuned.</p>

<p>Take care!</p>

<p>Abhishek Luv</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Standing and Sitting With Pomodoro Technique]]></title>
    <link href="http://www.abhishekluv.in/blog/2016/01/13/standing-and-sitting-with-pomodoro-technique/"/>
    <updated>2016-01-13T17:31:42+05:30</updated>
    <id>http://www.abhishekluv.in/blog/2016/01/13/standing-and-sitting-with-pomodoro-technique</id>
    <content type="html"><![CDATA[<p>Standing and Sitting with Pomodoro Technique.</p>

<p>This week I decided to experiment and make a custom standing desk for myself.</p>




<!-- more -->




<p><em>As I had mentioned in one of my <a href="http://www.abhishekluv.in/blog/2015/12/21/plans-for-year-2016/">previous post</a> that I will be keeping track of every task I do and blog about it online.</em></p>




<p>At this moment the setup looks quite messy with a lot of wires hanging around.</p>




<h2>Things used to setup the standing desk</h2>




<p><em>Only two things.</em></p>




<ul>
<li>A Wooden adjustable study table</li>
<li>Some books to adjust the height of the wooden study table</li>
</ul>




<h2>Cost</h2>




<p>Just 900/- INR i.e. $15</p>




<p><img src="" data-src="http://s3-ap-southeast-1.amazonaws.com/d2dstaticresources/abhishek/Standing+Desk.JPG" title="Abhishek Luv's Custom Standing Desk" alt="&quot;Abhishek Luv's Custom Standing Desk&quot;" /></p>


<p>Why a standing desk? Because too much of sitting is bad.</p>

<h2>What happens if you stand too much?</h2>

<ul>
<li>It can cause leg pain</li>
<li>It can cause back pain</li>
<li>It can make your legs sore</li>
</ul>


<h2>What happens if you sit too much?</h2>

<ul>
<li>It can affect the flow of blood and oxygen in your body</li>
<li>It can become the cause of your obesity</li>
<li>It can cause you headaches, legs, arms and wrist numbness</li>
</ul>


<p>We need to strike a balance between standing, sitting and doing activities like stretching, squatting, doing vital deep diaphragmatic breathing, and drinking plenty of water which can help us lose those fat sitting on our belly.</p>

<p>Ever heard of Pomodoro technique?</p>

<p>It&rsquo;s a technique where you work with time and not against time by taking short breaks in between while doing your work.</p>

<p>It can help you manage distractions and create a better work/life balance.</p>

<p>Now should we stand or sit while working? It&rsquo;s not a question about standing or sitting. Moving more is probably better than standing or sitting.</p>

<h2>Better solution</h2>

<p>A better solution is to use Pomodoro technique with standing and sitting while working.</p>

<p>Example:</p>

<ul>
<li>Standing for 25mins and Sitting for 5mins</li>
<li>Sitting for 50mins and Standing for 10mins</li>
<li>Note: Don&rsquo;t forget to include squatting and stretching and having plenty of water while you stand or sit</li>
</ul>


<p>The key is to do some activity every day.</p>

<ul>
<li>A walk to and from work</li>
<li>or taking the stairs</li>
</ul>


<p>Stay healthy, Stay fit!</p>

<p>Stay tuned!</p>




<p>Take care!</p>




<p>Abhishek Luv</p>

]]></content>
  </entry>
  
</feed>
